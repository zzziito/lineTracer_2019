/*
 The second programming assignment of the 2015 S&I Embedded Seminar 
 Make semi_digital clock by using timer interrupt 

invented by HT
*/

#include "stm32f10x.h"
#include "GPIO_configure.h"
#include "MOTOR_configure.h"
#include "CAM_configure.h"
#include "OLED.h"
#include "font_8.h"
#include "utils.h"
#include "System_Config.h"

extern volatile uint16_t CAM_BUFFER[128];
extern volatile uint16_t CAM_DATA_PRE_1[128];
extern volatile uint16_t CAM_DATA_MEAN[128];
extern volatile uint16_t CAM_DATA_RECT[128]; 
extern volatile uint16_t CAM_DATA_NORMALIZED[128];

int i=0, max=0, a=0, count=0, STOP=0, flag=0,schoolZoneCounter=0, q=0,schoolZoneBulean=0,b=0, min=0xffff, mode=0, speed_left = 300, stopbool=0,k=0,rightFlag=0, leftFlag=0;
int speed_right = 300;
int direction=0; 
int schoolZone[127];
int stop[127];
int filter[127];



volatile uint8_t pageIndex = 0;

int main(void)
{
   System_ConfigPLL();      // Overclock this system 8Mhz to 64Mhz
   SysTick_Config(64000);   // System is 64Mhz // 64000 tick -> 1ms period to call SysTick interrup
   GPIO_Configuration();
   OLED_Configuration();
   MOTOR_Configuration();
   CAM_CLK_Configuration();
   CAM_ADC_Configuration();
   SYNC_ON;
   OLED_begin(SWITCH_CAP_VCC);

   while (1)
   { 
      a=0;
      count=0;
      max = 0;
      min = 0xffff;
      schoolZoneCounter=0;
      q=0;
      k=0;
       
        for(i=0; i<127; i++){
                     stop[i]=0;
                     filter[i]=0;
         } //?????
      
      
       if(BUTTON2_PRESS)
      {   
         Delay_ms(100);
         if(BUTTON2_PRESS)   mode = (mode+1)%4;
      }
      
      if(BUTTON1_PRESS)
      {
         Delay_ms(100);
         if(BUTTON1_PRESS)   mode = (mode+4-1)%4;
      }
      OLED_clearDisplay();
      
      switch(mode)
      {
         //Origin value
         case 3:
            for(i=0; i<128; i++)
            {
               OLED_drawYLine(i, 64-(CAM_DATA_PRE_1[i]/32),(CAM_DATA_PRE_1[i]/32));
               if(max<CAM_BUFFER[i])
                  max = CAM_BUFFER[i];
               if(min>CAM_BUFFER[i])
                  min = CAM_BUFFER[i];      
            }
         break;
         //mean filter
         case 1:
            for(i=0; i<128; i++)
            {
               OLED_drawYLine(i, 64-(CAM_DATA_MEAN[i]/32),(CAM_DATA_MEAN[i]/32));
               if(max<CAM_DATA_MEAN[i])
                  max = CAM_DATA_MEAN[i];
               if(min>CAM_DATA_MEAN[i])
                  min = CAM_DATA_MEAN[i]; 
            }
         break;
         //Rectifier
         case 2:
            for(i=0; i<128; i++)
            {   
               OLED_drawYLine(i, 64-(CAM_DATA_RECT[i]/32),(CAM_DATA_RECT[i]/32));
               if(max<CAM_DATA_RECT[i])
                  max = CAM_DATA_RECT[i];
               if(min>CAM_DATA_RECT[i])
                  min = CAM_DATA_RECT[i];
            }
         break;
         //Normalize
         case 0:
            for(i=0; i<128; i++)
            {   

               OLED_drawYLine(i, 64-(CAM_DATA_NORMALIZED[i]/32),(CAM_DATA_NORMALIZED[i]/32));
               if(max<CAM_DATA_NORMALIZED[i])
                  max = CAM_DATA_NORMALIZED[i];
               if(min>CAM_DATA_NORMALIZED[i])
                  min = CAM_DATA_NORMALIZED[i]; 
            }
         break;
         default:
         break;
      }
       
      
    for (i=0; i<128; i++){
         
      if(CAM_DATA_NORMALIZED[i]<700 && (CAM_DATA_MEAN[i]-CAM_DATA_PRE_1[i]<1000)){
                
                q=q+1;
                
        if(q>2){
            
            filter[count] = CAM_DATA_MEAN[i] - CAM_DATA_PRE_1[i];
            a=a+i;
            count+=1;
            schoolZone[i]=1;
                
         }
                
      }
         
        else{
            
            schoolZone[i]=0;
                
                 q=0;
            
         }
           
      }
   
      for (i=0; i<127; i++){
      
         if(schoolZone[i]!=schoolZone[i+1]){
            
               stop[schoolZoneCounter]=i;
                
               schoolZoneCounter+=1;
         }    
      }
         
      
     k=stop[3]-stop[0]; 
      
      if ((schoolZoneCounter>=6 && schoolZoneCounter<13) && b==0){
         
          b=1;
      
      }
      
       else if(schoolZoneCounter<6 && b==1){
            
         if(schoolZoneBulean == 0){
            schoolZoneBulean =1;
            b=0;
         }
         else {
            schoolZoneBulean=0;
            b=0;
         }
          
      }
     
       
      if(k>60 && rightFlag==0 && leftFlag==0 && schoolZoneCounter>2 && schoolZoneCounter<6){
        
        stopbool=1;
        
      }   

      
      if(stopbool==0){
         
        if(!schoolZoneBulean){ //no-schoolzone
      
            if(count>1){
      
                direction=a/count; 
         
                if(direction<50){
                            speed_right = 650 + 5*(64 - direction);
                            speed_left = 650 - 3*(64 - direction);
                    rightFlag=1;
                    leftFlag=0;
                }
         
                else if(direction>70){
                    rightFlag=0;
                    leftFlag=1;
                            speed_right = 650 + 3*(64 - direction);
                            speed_left = 650 - 5*(64 - direction);
                }
          
                else if(direction>=50 && direction<=70){
              
                   rightFlag=0;
                   leftFlag=0;
                            speed_right = 650 + 3*(64 - direction);
                            speed_left = 650 - 3*(64 - direction);
                }


            }
         
         else{   
      
                
            if(rightFlag){
                speed_right = 800;
                speed_left = 300;
            }
            else if(leftFlag){
               speed_right = 300;
               speed_left = 800;
            }
   
        }   
   
      Motor_Go(speed_left, speed_right);

        }
      
        else{ //schoolzone 
                  
         
            speed_right = 450 + 3*(64 - direction);
            speed_left = 450 - 3*(64 - direction);
   
        }      
    
          Motor_Go( speed_left, speed_right);
         
      }
      
      
         
      
      else{
          
                  Motor_Stop();
      
      }
      
     
     
 
      OLED_drawInt(100,4,FONT_8,stop[3]);
      OLED_drawInt(70,4,FONT_8,stop[2]);
      OLED_drawInt(50,4,FONT_8,stop[1]);
      OLED_drawInt(20,4,FONT_8,stop[0]);
      OLED_drawInt(100,13,FONT_8,speed_right);
      OLED_drawInt(70,13,FONT_8,k);
      OLED_drawInt(50,13,FONT_8,stopbool);
      OLED_drawInt(20,13,FONT_8,speed_left);
      

      
      OLED_display();   
   
      
   
 }
      
}                          

void SysTick_Handler(void)      // 1ms Systick
{    
   Utils_Task(1000);
}